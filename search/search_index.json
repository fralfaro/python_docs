{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Bienvenido a Python Docs","title":"Home"},{"location":"#bienvenido-a-python-docs","text":"","title":"Bienvenido a Python Docs"},{"location":"demo/","text":"demo Greet someone. Parameters: Name Type Description Default name str The name of the person to greet. required Returns: Type Description str A greeting message. Source code in pydocs/main.py def greet ( name : str ) -> str : \"\"\"Greet someone. Parameters: name: The name of the person to greet. Returns: A greeting message. \"\"\" return f \"Hello { name } !\" Calculate the mean absolute error (MAE) metric. Parameters: Name Type Description Default targets np.ndarray Real values. required predictions np.ndarray Estimated values. required Returns: Type Description float float The calculated MAE value rounded to four decimal places. Source code in pydocs/objetos_numpy.py def mean_absolute_error ( targets : np . ndarray , predictions : np . ndarray ) -> float : \"\"\" Calculate the mean absolute error (MAE) metric. Parameters: targets (np.ndarray): Real values. predictions (np.ndarray): Estimated values. Returns: float The calculated MAE value rounded to four decimal places. \"\"\" error = predictions - targets return round ( np . abs ( error ) . mean (), 4 ) ForecastData ( BaseModel ) Validate forecast data Source code in pydocs/ppydantic.py class ForecastData ( BaseModel ): \"\"\" Validate forecast data \"\"\" model_config = ConfigDict ( arbitrary_types_allowed = True ) df : pd . DataFrame @staticmethod def from_file ( path_layout : os . PathLike ) -> \"ForecastData\" : \"\"\" Read data from \".csv\" :param path_layout: path :return: \"ForecastData\" object \"\"\" with open ( path_layout , \"rb\" ) as csv_file : result = pd . read_csv ( csv_file , sep = \",\" ) . assign ( ds = lambda df : pd . to_datetime ( df [ \"ds\" ], format = \"%Y-%m\" ) ) return ForecastData ( df = result ) @field_validator ( \"df\" ) def data_no_empty ( cls , df ): \"\"\" Read data from \".csv\" :param path_layout: path :return: \"ForecastData\" object \"\"\" assert not df . empty , \"without data\" return df @field_validator ( \"df\" ) def data_correct_cols ( cls , df ): REQUIRED_COLS = [ \"ds\" , \"y\" , ] assert set ( df . columns . tolist ()) == set ( REQUIRED_COLS ), \"columns not valid\" return df . sort_values ( \"ds\" ) @field_validator ( \"df\" ) def data_no_duplicates ( cls , df ): should_be_index = [ \"ds\" , ] assert ( df . duplicated ( should_be_index , False ) . sum () == 0 ), \"duplicate data\" return df data_no_empty ( df ) classmethod Read data from \".csv\" :param path_layout: path :return: \"ForecastData\" object Source code in pydocs/ppydantic.py @field_validator ( \"df\" ) def data_no_empty ( cls , df ): \"\"\" Read data from \".csv\" :param path_layout: path :return: \"ForecastData\" object \"\"\" assert not df . empty , \"without data\" return df from_file ( path_layout ) staticmethod Read data from \".csv\" :param path_layout: path :return: \"ForecastData\" object Source code in pydocs/ppydantic.py @staticmethod def from_file ( path_layout : os . PathLike ) -> \"ForecastData\" : \"\"\" Read data from \".csv\" :param path_layout: path :return: \"ForecastData\" object \"\"\" with open ( path_layout , \"rb\" ) as csv_file : result = pd . read_csv ( csv_file , sep = \",\" ) . assign ( ds = lambda df : pd . to_datetime ( df [ \"ds\" ], format = \"%Y-%m\" ) ) return ForecastData ( df = result )","title":"demo"},{"location":"demo/#demo","text":"Greet someone. Parameters: Name Type Description Default name str The name of the person to greet. required Returns: Type Description str A greeting message. Source code in pydocs/main.py def greet ( name : str ) -> str : \"\"\"Greet someone. Parameters: name: The name of the person to greet. Returns: A greeting message. \"\"\" return f \"Hello { name } !\" Calculate the mean absolute error (MAE) metric. Parameters: Name Type Description Default targets np.ndarray Real values. required predictions np.ndarray Estimated values. required Returns: Type Description float float The calculated MAE value rounded to four decimal places. Source code in pydocs/objetos_numpy.py def mean_absolute_error ( targets : np . ndarray , predictions : np . ndarray ) -> float : \"\"\" Calculate the mean absolute error (MAE) metric. Parameters: targets (np.ndarray): Real values. predictions (np.ndarray): Estimated values. Returns: float The calculated MAE value rounded to four decimal places. \"\"\" error = predictions - targets return round ( np . abs ( error ) . mean (), 4 )","title":"demo"},{"location":"demo/#pydocs.ppydantic.ForecastData","text":"Validate forecast data Source code in pydocs/ppydantic.py class ForecastData ( BaseModel ): \"\"\" Validate forecast data \"\"\" model_config = ConfigDict ( arbitrary_types_allowed = True ) df : pd . DataFrame @staticmethod def from_file ( path_layout : os . PathLike ) -> \"ForecastData\" : \"\"\" Read data from \".csv\" :param path_layout: path :return: \"ForecastData\" object \"\"\" with open ( path_layout , \"rb\" ) as csv_file : result = pd . read_csv ( csv_file , sep = \",\" ) . assign ( ds = lambda df : pd . to_datetime ( df [ \"ds\" ], format = \"%Y-%m\" ) ) return ForecastData ( df = result ) @field_validator ( \"df\" ) def data_no_empty ( cls , df ): \"\"\" Read data from \".csv\" :param path_layout: path :return: \"ForecastData\" object \"\"\" assert not df . empty , \"without data\" return df @field_validator ( \"df\" ) def data_correct_cols ( cls , df ): REQUIRED_COLS = [ \"ds\" , \"y\" , ] assert set ( df . columns . tolist ()) == set ( REQUIRED_COLS ), \"columns not valid\" return df . sort_values ( \"ds\" ) @field_validator ( \"df\" ) def data_no_duplicates ( cls , df ): should_be_index = [ \"ds\" , ] assert ( df . duplicated ( should_be_index , False ) . sum () == 0 ), \"duplicate data\" return df","title":"ForecastData"},{"location":"demo/#pydocs.ppydantic.ForecastData.data_no_empty","text":"Read data from \".csv\" :param path_layout: path :return: \"ForecastData\" object Source code in pydocs/ppydantic.py @field_validator ( \"df\" ) def data_no_empty ( cls , df ): \"\"\" Read data from \".csv\" :param path_layout: path :return: \"ForecastData\" object \"\"\" assert not df . empty , \"without data\" return df","title":"data_no_empty()"},{"location":"demo/#pydocs.ppydantic.ForecastData.from_file","text":"Read data from \".csv\" :param path_layout: path :return: \"ForecastData\" object Source code in pydocs/ppydantic.py @staticmethod def from_file ( path_layout : os . PathLike ) -> \"ForecastData\" : \"\"\" Read data from \".csv\" :param path_layout: path :return: \"ForecastData\" object \"\"\" with open ( path_layout , \"rb\" ) as csv_file : result = pd . read_csv ( csv_file , sep = \",\" ) . assign ( ds = lambda df : pd . to_datetime ( df [ \"ds\" ], format = \"%Y-%m\" ) ) return ForecastData ( df = result )","title":"from_file()"}]}